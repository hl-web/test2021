[{"D:\\GRANT\\src\\index.js":"1","D:\\GRANT\\src\\Store.js":"2","D:\\GRANT\\src\\App.js":"3","D:\\GRANT\\src\\reportWebVitals.js":"4","D:\\GRANT\\src\\Reducers\\Index.js":"5","D:\\GRANT\\src\\components\\Header\\Index.js":"6","D:\\GRANT\\src\\components\\Footer\\Index.js":"7","D:\\GRANT\\src\\components\\Contents\\Index.js":"8","D:\\GRANT\\src\\components\\Contents\\Gantt\\Index.js":"9","D:\\GRANT\\src\\components\\Contents\\GanttD3\\index.js":"10","D:\\GRANT\\src\\components\\Contents\\GanttD3\\ganttChart.js":"11","D:\\GRANT\\src\\components\\Contents\\GanttD3\\tasksList.js":"12","D:\\GRANT\\src\\components\\Contents\\GanttD3\\task.js":"13","D:\\GRANT\\src\\components\\Contents\\GanttD3\\Modal.js":"14","D:\\GRANT\\src\\components\\Contents\\GanttD3\\useModal.js":"15","D:\\GRANT\\src\\components\\Contents\\GanttD3\\GanttTable.js":"16","D:\\GRANT\\src\\components\\Contents\\GanttD3\\dragChart.js":"17","D:\\GRANT\\src\\components\\Contents\\GanttD3\\data.js":"18","D:\\GRANT\\src\\components\\Contents\\GanttD3\\plansBar.js":"19","D:\\GRANT\\src\\components\\Contents\\GanttD3\\initPlansBar.js":"20","D:\\GRANT\\src\\components\\Contents\\GanttD3\\currentBar.js":"21","D:\\GRANT\\src\\components\\Contents\\GanttD3\\toolTip.js":"22","D:\\GRANT\\src\\components\\Contents\\GanttD3\\flowChart.js":"23","D:\\GRANT\\src\\components\\Contents\\GanttD3\\PeriodList.js":"24","D:\\GRANT\\src\\components\\Contents\\GanttD3\\PeriodItem.js":"25"},{"size":669,"mtime":1609376397732,"results":"26","hashOfConfig":"27"},{"size":145,"mtime":1609135811394,"results":"28","hashOfConfig":"27"},{"size":354,"mtime":1609135811380,"results":"29","hashOfConfig":"27"},{"size":375,"mtime":1609135811464,"results":"30","hashOfConfig":"27"},{"size":182,"mtime":1609135811390,"results":"31","hashOfConfig":"27"},{"size":284,"mtime":1609135811443,"results":"32","hashOfConfig":"27"},{"size":283,"mtime":1609135811438,"results":"33","hashOfConfig":"27"},{"size":756,"mtime":1609203329137,"results":"34","hashOfConfig":"27"},{"size":644,"mtime":1609135811417,"results":"35","hashOfConfig":"27"},{"size":7562,"mtime":1609388035435,"results":"36","hashOfConfig":"27"},{"size":7326,"mtime":1609385915772,"results":"37","hashOfConfig":"27"},{"size":4253,"mtime":1609376397722,"results":"38","hashOfConfig":"27"},{"size":2897,"mtime":1609385252808,"results":"39","hashOfConfig":"27"},{"size":9833,"mtime":1609388035416,"results":"40","hashOfConfig":"27"},{"size":509,"mtime":1609320433471,"results":"41","hashOfConfig":"27"},{"size":2901,"mtime":1609376397694,"results":"42","hashOfConfig":"27"},{"size":2475,"mtime":1609300862445,"results":"43","hashOfConfig":"27"},{"size":5895,"mtime":1609385252788,"results":"44","hashOfConfig":"27"},{"size":875,"mtime":1609300862468,"results":"45","hashOfConfig":"27"},{"size":949,"mtime":1609311636033,"results":"46","hashOfConfig":"27"},{"size":1014,"mtime":1609300862434,"results":"47","hashOfConfig":"27"},{"size":1699,"mtime":1609376397727,"results":"48","hashOfConfig":"27"},{"size":2380,"mtime":1609385252795,"results":"49","hashOfConfig":"27"},{"size":690,"mtime":1609388035427,"results":"50","hashOfConfig":"27"},{"size":289,"mtime":1609388035422,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"xgy1lg",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"54"},"D:\\GRANT\\src\\index.js",[],["113","114"],"D:\\GRANT\\src\\Store.js",[],"D:\\GRANT\\src\\App.js",["115"],"import Header from \"./components/Header/Index\";\r\nimport Contents from \"./components/Contents/Index\";\r\nimport Footer from \"./components/Footer/Index\";\r\nimport { connect } from 'react-redux';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Header />\r\n        <Contents/>\r\n        <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\GRANT\\src\\reportWebVitals.js",[],"D:\\GRANT\\src\\Reducers\\Index.js",[],"D:\\GRANT\\src\\components\\Header\\Index.js",[],"D:\\GRANT\\src\\components\\Footer\\Index.js",[],"D:\\GRANT\\src\\components\\Contents\\Index.js",["116"],"import React from \"react\";\r\n// import Calendar from \"./Calendar/Index\";\r\nimport Gantt from \"./Gantt/Index\";\r\nimport common from \"../../styles/Common.module.scss\";\r\nimport GanttD3 from \"./GanttD3\";\r\n// const times = {\r\n//   start: '2020-01-01',\r\n//   end: '2021-01-01'\r\n// }\r\n\r\n// const data = {\r\n//   data: [\r\n//     {id: 1, text: 'Task #1', start_date: '15-04-2017', duration: 3, progress: 0.6},\r\n//     {id: 2, text: 'Task #2', start_date: '18-04-2017', duration: 3, progress: 0.4}\r\n//   ],\r\n//   links: [\r\n//     {id: 1, source: 1, target: 2, type: '0'}\r\n//   ]\r\n// };\r\nconst Contents = () => {\r\n  return (\r\n    <main className={common.contents}>\r\n      {/* <Gantt tasks={data}/> */}\r\n      <GanttD3 />\r\n    </main>\r\n  );\r\n};\r\nexport default Contents;\r\n","D:\\GRANT\\src\\components\\Contents\\Gantt\\Index.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\index.js",["117","118","119","120"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { debounce } from 'lodash';\r\nimport GanttChart from './ganttChart';\r\nimport GanttTable from './GanttTable';\r\nimport common from '../../../styles/Common.module.scss';\r\nimport Modal from './Modal';\r\nimport useModal from './useModal';\r\nimport moment from 'moment';\r\nimport Datetime from 'react-datetime';\r\nimport 'react-datetime/css/react-datetime.css';\r\nimport { initData } from './data';\r\nimport PeriodList from './PeriodList';\r\n\r\nconst GanttD3 = (props) => {\r\n  const getWidth = () => {\r\n    return document.getElementById('dom').getBoundingClientRect().width;\r\n  };\r\n  const [width, setWidth] = useState(0);\r\n  const [data, setData] = useState(initData);\r\n  const [from, setFrom] = useState(moment().subtract(30, 'days'));\r\n  const [to, setTo] = useState(moment());\r\n  const chartRef = useRef();\r\n  const ganttChart = useRef();\r\n  const { modal, toggleModal } = useModal();\r\n  const resizeListener = useCallback(\r\n    debounce(() => {\r\n      setWidth(getWidth());\r\n    }, 150),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      chartRef.current.innerHTML = '';\r\n    }\r\n    const dataRender = [...data].filter((d) => d.isShow === true);\r\n    ganttChart.current = new GanttChart(chartRef.current, width, dataRender.length, from, to);\r\n    ganttChart.current.render(dataRender);\r\n  }, [width, data]);\r\n\r\n  useEffect(() => {\r\n    ganttChart.current.changeScale(from, to);\r\n  }, [from, to]);\r\n\r\n  useEffect(() => {\r\n    setData(initData);\r\n    setWidth(getWidth());\r\n\r\n    window.addEventListener('resize', resizeListener);\r\n    return () => {\r\n      window.removeEventListener('resize', resizeListener);\r\n    };\r\n  }, []);\r\n\r\n  const setPeriod = useCallback(\r\n    (type) => {\r\n      let date = moment(to);\r\n      switch (type) {\r\n        case 'day':\r\n          setFrom(date.subtract(1, 'days'));\r\n          break;\r\n        case 'week':\r\n          setFrom(date.subtract(7, 'days'));\r\n          break;\r\n        case 'month':\r\n          setFrom(date.subtract(1, 'months'));\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    },\r\n    [to]\r\n  );\r\n\r\n  const handleCreateTask = (e, form, appendIndex) => {\r\n    e.preventDefault();\r\n    let obj = {\r\n      ...form,\r\n      startTimeInitialPlan: form.startTimePlan,\r\n      endTimeInitialPlan: form.endTimePlan,\r\n    };\r\n    setData((data) => {\r\n      const temp = [...data];\r\n      if (!appendIndex) {\r\n        let index = temp\r\n          .slice()\r\n          .reverse()\r\n          .findIndex((el) => {\r\n            return el.type === obj.type;\r\n          });\r\n        if (index > -1) {\r\n          temp.splice(temp.length - index, 0, obj);\r\n          return temp;\r\n        }\r\n        temp.push(obj);\r\n        return temp;\r\n      }\r\n      const index = temp.findIndex((el) => el.id === appendIndex);\r\n      temp[index].hasChild = true;\r\n      temp.splice(index + 1, 0, obj);\r\n      return temp;\r\n    });\r\n    toggleModal(e);\r\n  };\r\n\r\n  const handleUpdateTask = (e, form, appendIndex) => {\r\n    e.preventDefault();\r\n    let diffInStartTime = moment(form.startTimeInitialPlan).diff(moment(form.startTimePlan));\r\n    let diffInEndTime = moment(form.endTimeInitialPlan).diff(moment(form.endTimePlan));\r\n    let obj = {\r\n      ...form,\r\n      isTimePlanUpdated: diffInStartTime !== 0 || diffInEndTime !== 0,\r\n    };\r\n    setData((data) => {\r\n      const temp = [...data];\r\n      const index = temp.findIndex((el) => el.id === appendIndex);\r\n      temp.splice(index, 1, obj);\r\n      return temp;\r\n    });\r\n    toggleModal(e);\r\n  };\r\n\r\n  const handleDeleteTask = (e, id) => {\r\n    e.preventDefault();\r\n    setData((data) => {\r\n      const temp = [...data];\r\n      const index = temp.findIndex((el) => el.id === id);\r\n      //If element hasChild -> Delete all Child\r\n      if (temp[index].hasChild) {\r\n        const childIdList = [];\r\n        for (let i = index + 1; i < temp.length; i++) {\r\n          if (temp[i].level > temp[index].level) {\r\n            childIdList.push(temp[i].id);\r\n          } else break;\r\n        }\r\n        childIdList.forEach((childId) => {\r\n          let childIndex = temp.findIndex((el) => el.id === childId);\r\n          temp.splice(childIndex, 1);\r\n        });\r\n      }\r\n      ///Find if the element is the only Child\r\n      if (temp[index].level > 1) {\r\n        let isOnlyChild = true;\r\n        let parentIndex;\r\n        //loop reverse upward\r\n        for (let i = index - 1; i >= 0; i--) {\r\n          if (temp[i].level === temp[index].level) {\r\n            isOnlyChild = false;\r\n            break;\r\n          }\r\n          if (temp[i].level < temp[index].level) {\r\n            parentIndex = i;\r\n            break;\r\n          }\r\n        }\r\n        //loop forward\r\n        for (let i = index + 1; i < temp.length; i++) {\r\n          if (temp[i].level === temp[index].level) {\r\n            isOnlyChild = false;\r\n            break;\r\n          }\r\n          if (temp[i].level < temp[index].level) {\r\n            break;\r\n          }\r\n        }\r\n        //if OnlyChild then update it's parent\r\n        if (isOnlyChild) {\r\n          temp[parentIndex].collapsed = false;\r\n          temp[parentIndex].hasChild = false;\r\n        }\r\n      }\r\n      //remove element\r\n      temp.splice(index, 1);\r\n      return temp;\r\n    });\r\n    toggleModal(e);\r\n  };\r\n\r\n  const updateFrom = (e) => {\r\n    setFrom(e);\r\n  };\r\n  const updateTo = (e) => {\r\n    setTo(e);\r\n  };\r\n\r\n  const handleCollapse = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    const target = e.currentTarget;\r\n    let temp = [...data];\r\n    const index = temp.findIndex((el) => el.id == target.id);\r\n\r\n    for (let i = index + 1; i < temp.length; i++) {\r\n      if (temp[i].level > temp[index].level) {\r\n        temp[i].isShow = temp[index].collapsed;\r\n      } else break;\r\n      if (temp[i].collapsed === true) {\r\n        break;\r\n      }\r\n    }\r\n    if (index > -1) {\r\n      temp[index].collapsed = !temp[index].collapsed;\r\n    }\r\n    setData(temp);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={common.FormInput}>\r\n        <Datetime\r\n          // ref={dateFromRef}\r\n          locale=\"ja-JP\"\r\n          value={from}\r\n          dateFormat=\"YYYY/MM/DD\"\r\n          timeFormat={false}\r\n          onChange={updateFrom}\r\n          closeOnSelect={true}\r\n        />\r\n        <span>〜</span>\r\n        <Datetime\r\n          // ref={dateToRef}\r\n          locale=\"ja-JP\"\r\n          value={to}\r\n          dateFormat=\"YYYY/MM/DD\"\r\n          timeFormat={false}\r\n          onChange={updateTo}\r\n          closeOnSelect={true}\r\n        />\r\n      </div>\r\n      <PeriodList setPeriod={setPeriod} />\r\n      <div className={common.container}>\r\n        <div className={common.tableWrapper}>\r\n          {/* <ul className={common.btnList}>\r\n            <li>\r\n              <button className={common.button_default} onClick={toggleModal}>\r\n                Add New Task\r\n              </button>\r\n            </li>\r\n          </ul> */}\r\n          {modal.isShowing && (\r\n            <Modal\r\n              data={data}\r\n              modal={modal}\r\n              toggleModal={toggleModal}\r\n              handleCreateTask={handleCreateTask}\r\n              handleUpdateTask={handleUpdateTask}\r\n              handleDeleteTask={handleDeleteTask}\r\n            />\r\n          )}\r\n          <GanttTable data={data} toggleModal={toggleModal} handleCollapse={handleCollapse}></GanttTable>\r\n        </div>\r\n        <div id=\"dom\" className={common.dom} ref={chartRef}></div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GanttD3;\r\n","D:\\GRANT\\src\\components\\Contents\\GanttD3\\ganttChart.js",["121","122","123"],"import * as d3 from 'd3';\r\nimport TasksList from './tasksList';\r\nimport moment from 'moment';\r\n\r\nexport default class GanttChart {\r\n  constructor(containerElement, width, length, from, to) {\r\n    this.gap = 54;\r\n    this.containerElement = containerElement;\r\n    this.margin = {\r\n      top: 41,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n    };\r\n    this.width = width - this.margin.left - this.margin.right;\r\n    this.height = this.gap * length + this.margin.top;\r\n    this.from = from.format('YYYY-MM-DD');\r\n    this.to = moment(to).add(1,'days').format('YYYY-MM-DD');\r\n    this.svg = d3\r\n      .select(containerElement)\r\n      .append('svg')\r\n      .attr('width', width)\r\n      .attr('height', this.height)\r\n      .append('g')\r\n      .attr('transform', `translate(${this.margin.left},${this.margin.top})`);\r\n    this.mainChart = null;\r\n    this.timeScale = null;\r\n    this.groupTasks = null;\r\n    this.tasksList = null;\r\n\r\n\r\n \r\n\r\n\r\n  }\r\n  render(data) {\r\n    let categories = data.map((d) => d.type);\r\n    categories = checkUnique(categories);\r\n\r\n    let dateFormat = d3.timeParse('%Y-%m-%d');\r\n    this.timeScale = d3\r\n      .scaleTime()\r\n      .domain([dateFormat(this.from), dateFormat(this.to)])\r\n      .range([0, this.width]);\r\n\r\n    let transX = Math.abs(this.width / moment.duration(moment(this.from).diff(moment(this.to))).asDays() / 2);\r\n    let transX2 = Math.abs(this.width / moment.duration(moment(this.from).diff(moment(this.to))).asDays())*15;\r\n\r\n    // SubAxis\r\n    this.subAxisX = d3\r\n      .axisTop()\r\n      .scale(this.timeScale)\r\n      .ticks(d3.timeMonth.every(1))\r\n      .tickFormat((date) => d3.timeFormat('%Y年%m月')(date))\r\n  \r\n\r\n    d3.select(this.containerElement).select('svg').append('rect')\r\n      .attr('stroke','#ccc')\r\n      .attr('stroke-width', '2')\r\n      .attr('x', 0)\r\n      .attr('y', 0)\r\n      .attr('fill', 'none')\r\n      .attr('shape-rendering', 'crispEdges')\r\n      .attr('width',this.width)\r\n      .attr('height', this.height);\r\n\r\n    // render SubAxis\r\n    this.svg\r\n      .append('g')\r\n      .attr('class', 'subAxisX')\r\n      .attr('transform', `translate(0, -20)`)\r\n      // .transition()\r\n      // .duration(1000)\r\n      .call(this.subAxisX)\r\n      .call(g => {\r\n        g.select('.domain').attr('shape-rendering', 'crispEdges').attr('stroke', '#ccc');\r\n        g.selectAll('line').attr('shape-rendering', 'crispEdges').attr('stroke', 'rgba(0,0,0,0.2)');\r\n        g.selectAll('text').attr('transform', `translate(${transX2},0)`);\r\n      });\r\n\r\n    // render current date\r\n    const currentDate = this.svg\r\n      .append('rect')\r\n      .attr('class', 'current-date')\r\n      .attr('x', this.timeScale(moment().startOf('day')))\r\n      .attr('y', 0)\r\n      .attr('height', this.height)\r\n      .attr('stroke', 'none')\r\n      .attr('fill', '#ffec6e')\r\n      .style('pointer-events', 'none')\r\n      .attr('width', transX * 2)\r\n      .attr('transform', `translate(0,-19)`)\r\n      .attr('opacity', 1);\r\n\r\n    // axisX\r\n    this.axisX = d3\r\n      .axisTop()\r\n      .scale(this.timeScale)\r\n      .ticks(d3.timeDay.every(1))\r\n      .tickSize(-this.height)\r\n      .tickFormat((date) => d3.timeFormat('%d')(date));\r\n\r\n    this.mainChart = this.svg.append('g').attr('class', 'main-chart');\r\n\r\n    // render TasksList\r\n    this.tasksList = new TasksList(this.gap, data, categories, this.timeScale);\r\n    let tasksList = this.mainChart.node().appendChild(this.tasksList.render());\r\n\r\n    // render axis X\r\n    const timeText = this.svg\r\n    .append('g')\r\n    .attr('class', 'axisX')\r\n    .style('pointer-events', 'none')\r\n    // .transition()\r\n    // .duration(1000)\r\n    .call(this.axisX)\r\n    .call((g) => {\r\n      g.select('.domain').attr('shape-rendering', 'crispEdges').attr('stroke', '#ccc').attr('transform','translate(0,-1)');\r\n      g.selectAll('line').attr('shape-rendering', 'crispEdges').attr('stroke', 'rgba(0,0,0,0.2)').attr('transform','translate(0,-20)');\r\n      g.selectAll('text').attr('transform', `translate(${transX},-3)`);\r\n    });\r\n    let grid = this.svg.append('g');\r\n    grid\r\n      .selectAll('.horizon-grid')\r\n      .data(data)\r\n      .enter()\r\n      .append('line')\r\n      .attr('class', 'horizon-grid')\r\n      .attr('stroke', 'rgba(0, 0, 0, 0.2)')\r\n      .attr('stroke-width', '1')\r\n      .attr('x1', 0)\r\n      .attr('y1', 0)\r\n      .attr('x2', `${this.width}`)\r\n      .attr('y2', 0)\r\n      .attr('shape-rendering', 'crispEdges')\r\n      .attr('transform', (d, i) => `translate(0,${(i + 1) * this.gap})`);\r\n\r\n    //add clip path to the svg\r\n    this.mainChart\r\n      .append('defs')\r\n      .append('clipPath')\r\n      .attr('id', 'clip')\r\n      .append('rect')\r\n      .attr('width', this.width)\r\n      .attr('height', this.height)\r\n      .attr('x', 0)\r\n      .attr('y', 0);\r\n    this.mainChart.selectAll('*:not(.tool-tip)').attr('clip-path', 'url(#clip)');\r\n\r\n    this.initLegend();\r\n    this.createLegend('計画工程（当初）', '#ffffff');\r\n    this.createLegend('計画工程（現在）', 'orange');\r\n    this.createLegend('実際', '#2b3a6a');\r\n    function checkUnique(arr) {\r\n      let hash = {},\r\n        result = [];\r\n      for (let i = 0, l = arr.length; i < l; ++i) {\r\n        if (!hash.hasOwnProperty(arr[i])) {\r\n          hash[arr[i]] = true;\r\n          result.push(arr[i]);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  changeScale(from, to) {\r\n    this.from = from.format('YYYY-MM-DD');\r\n    this.to = moment(to).add(1,'days').format('YYYY-MM-DD');\r\n    let transX = Math.abs(this.width / moment.duration(moment(this.from).diff(moment(this.to))).asDays() / 2);\r\n    let transX2 = Math.abs(this.width / moment.duration(moment(this.from).diff(moment(this.to))).asDays())*15;\r\n    this.timeScale.domain([d3.timeParse('%Y-%m-%d')(this.from), d3.timeParse('%Y-%m-%d')(this.to)]);\r\n    this.svg\r\n      .select('.axisX')\r\n      .call(this.axisX.scale(this.timeScale))\r\n      .call((g) => {\r\n        g.select('.domain').attr('shape-rendering', 'crispEdges').attr('stroke', '#ccc').attr('transform','translate(0,-1)');\r\n        g.selectAll('line').attr('shape-rendering', 'crispEdges').attr('stroke', 'rgba(0,0,0,0.2)').attr('transform','translate(0,-20)');\r\n        g.selectAll('text').attr('transform', `translate(${transX},-3)`);\r\n      });\r\n      this.svg\r\n      .select('.subAxisX')\r\n      .call(this.subAxisX.scale(this.timeScale))\r\n      .call((g) => {\r\n        g.selectAll('text').attr('transform', `translate(${transX2},2)`);\r\n      });\r\n    this.svg.select('.subAxisX').call(this.subAxisX.scale(this.timeScale));\r\n    this.svg.select('.current-date').attr('x', this.timeScale(moment().startOf('day'))).attr('width', transX * 2);\r\n    this.tasksList.changeScale(this.timeScale);\r\n  }\r\n\r\n  initLegend = () => {\r\n    const legend = d3\r\n      .select('#dom')\r\n      .append('div')\r\n      .attr('class', 'legend');\r\n    legend.append('ul').attr('class', 'legend-list');\r\n  };\r\n\r\n  createLegend = (type, color) => {\r\n      const legend = d3.select('#dom .legend');\r\n      const legendItem = legend.select('ul.legend-list').append('li').attr('class', 'legend-item');\r\n      legendItem.append('span').attr('class', 'legend-label-color').style('background', color);\r\n      legendItem\r\n        .append('span')\r\n        .attr('class', 'legend-label-text')\r\n        .text(function () {\r\n          return type;\r\n        });\r\n  };\r\n}\r\n","D:\\GRANT\\src\\components\\Contents\\GanttD3\\tasksList.js",["124","125","126"],"import * as d3 from 'd3';\r\nimport Task from './task';\r\nimport DragChart from './dragChart';\r\nimport moment from 'moment';\r\nexport default class TasksList {\r\n  constructor(gap, data, categories, timeScale) {\r\n    this.gap = gap;\r\n    this.data = data;\r\n    this.categories = categories;\r\n    this.timeScale = timeScale;\r\n    this.tasksListContainer = null;\r\n    this.tasksList = null;\r\n\r\n    this.dateFormat = d3.timeParse('%Y-%m-%d');\r\n    this.containElement = document.createElementNS(d3.namespaces.svg, 'g');\r\n    this.tasksListContainer = d3.select(this.containElement).attr('class', 'tasks-list-container');\r\n    this.tasksList = this.tasksListContainer\r\n      .selectAll('g')\r\n      .data(this.data)\r\n      .enter();\r\n  }\r\n  render() {\r\n    this.task();\r\n    // new DragChart(tasksList, this.tasksListContainer);\r\n\r\n    return this.tasksListContainer.node();\r\n  }\r\n\r\n  task = () => {\r\n    this.tasksList.append((d, i) => {\r\n      const minDate = d3.min([this.dateFormat(d.startTimeCurrent), this.dateFormat(d.startTimePlan), this.dateFormat(d.startTimeInitialPlan)]);\r\n      let x = this.timeScale(minDate);\r\n      let y = i * this.gap + 4;\r\n      let currentStart = this.timeScale(this.dateFormat(d.startTimeCurrent))\r\n      let planStart = this.timeScale(this.dateFormat(d.startTimePlan))\r\n      let initialPlanStart = this.timeScale(this.dateFormat(d.startTimeInitialPlan))\r\n      let currentWidth = this.timeScale(d3.timeDay.offset(this.dateFormat(d.endTimeCurrent), 1)) - this.timeScale(this.dateFormat(d.startTimeCurrent));\r\n      let planWidth = this.timeScale(d3.timeDay.offset(this.dateFormat(d.endTimePlan), 1)) - this.timeScale(this.dateFormat(d.startTimePlan));\r\n      let initialPlanWidth = this.timeScale(d3.timeDay.offset(this.dateFormat(d.endTimeInitialPlan), 1)) - this.timeScale(this.dateFormat(d.startTimeInitialPlan));\r\n      let height = 20;\r\n      let progress = planWidth * d.progress/100;\r\n      let dependence = null;\r\n      let arrDepend = [];\r\n      let planStartChild = null;\r\n      let planWidthChild = null;\r\n      let yChild = null;\r\n      if (d.dependence) {\r\n        dependence = d.dependence;\r\n        dependence.forEach((d, i) => {\r\n          const test = this.data.find((a) => a.id === d);\r\n          planStartChild = test && this.timeScale(this.dateFormat(test.startTimePlan));\r\n          planWidthChild = test && this.timeScale(d3.timeDay.offset(this.dateFormat(test.endTimePlan), 1)) - this.timeScale(this.dateFormat(test.startTimePlan));\r\n          yChild = test && (this.data.indexOf(test) * this.gap + 4) - y;\r\n          arrDepend.push([planStartChild, planWidthChild, yChild]);\r\n        });\r\n      }\r\n      return new Task(currentStart, currentWidth, planStart, planWidth, initialPlanStart, initialPlanWidth, y, height, progress, d, dependence, arrDepend).render();\r\n    });\r\n  }\r\n\r\n  changeScale(timeScale) {\r\n    this.timeScale = timeScale;\r\n    this.containElement.innerHTML = \"\";\r\n    this.task();\r\n    \r\n    // TODO later\r\n    // this.tasksListContainer\r\n    //   .selectAll('.init-plans')\r\n    //   .data(this.data)\r\n    //   .attr('x', d => this.timeScale(this.dateFormat(d.startTimeInitialPlan)))\r\n    //   .attr('width', (d) => this.timeScale(this.dateFormat(d.endTimeInitialPlan)) - this.timeScale(this.dateFormat(d.startTimeInitialPlan)));\r\n    // this.tasksListContainer\r\n    //   .selectAll('.plans')\r\n    //   .data(this.data)\r\n    //   .attr('x', d => this.timeScale(this.dateFormat(d.startTimePlan)))\r\n    //   .attr('width', (d) => this.timeScale(this.dateFormat(d.endTimePlan)) - this.timeScale(this.dateFormat(d.startTimePlan)));\r\n    // // this.tasksListContainer\r\n    // //   .selectAll('.progress')\r\n    // //   .data(this.data)\r\n    // //   .attr('x', d => this.timeScale(this.dateFormat(d.startTimePlan)))\r\n    // //   .attr('width', (d) => (this.timeScale(this.dateFormat(d.endTimePlan)) - this.timeScale(this.dateFormat(d.startTimePlan))) * d.progress/100);\r\n    // this.tasksListContainer\r\n    //   .selectAll('.current')\r\n    //   .data(this.data)\r\n    //   .attr('x', d => this.timeScale(this.dateFormat(d.startTimeCurrent)))\r\n    //   .attr('width', (d) => this.timeScale(this.dateFormat(d.endTimeCurrent)) - this.timeScale(this.dateFormat(d.startTimeCurrent)));\r\n\r\n  }\r\n}\r\n","D:\\GRANT\\src\\components\\Contents\\GanttD3\\task.js",["127","128","129"],"import * as d3 from 'd3';\r\nimport PlansBar from './plansBar';\r\nimport InitPlansBar from './initPlansBar';\r\nimport CurrentBar from './currentBar';\r\nimport ToolTip from './toolTip';\r\nimport FlowChart from './flowChart';\r\nexport default class Task {\r\n  constructor(currentStart, currentWidth, planStart, planWidth, initialPlanStart, initialPlanWidth, y, height, progress, d, dependence, arrDepend) {\r\n    \r\n    this.currentStart = currentStart;\r\n    this.currentWidth = currentWidth;\r\n    this.planStart = planStart;\r\n    this.planWidth = planWidth;\r\n    this.initialPlanStart = initialPlanStart;\r\n    this.initialPlanWidth = initialPlanWidth;\r\n    this.height = height;\r\n    this.progress = progress;\r\n    this.y = y;\r\n    this.taskDetail = d;\r\n    this.dependence = dependence;\r\n    this.arrDepend = arrDepend;\r\n    this.toolTip = new ToolTip(this.taskDetail, 0, 0);\r\n    document.getElementById('dom').appendChild(this.toolTip.render());\r\n  }\r\n  render() {\r\n    let _y = this.y;\r\n    let _toolTip = this.toolTip;\r\n    let containElement = document.createElementNS(d3.namespaces.svg, 'g');\r\n    let taskContainer = d3.select(containElement)\r\n      .attr('class', 'task')\r\n      .attr('transform', `translate(0,${this.y})`);\r\n\r\n    // render plans\r\n    taskContainer.append(d => new PlansBar(this.planStart, this.planWidth, this.height, this.taskDetail).render());\r\n\r\n    // render init plan\r\n    if(this.taskDetail.isTimePlanUpdated) {\r\n      taskContainer.append(d => new InitPlansBar(this.initialPlanStart, this.initialPlanWidth, this.height, this.taskDetail).render());\r\n    }\r\n\r\n    // render progress bar\r\n    // let progress = taskContainer.append('rect')\r\n    //   .attr('class', 'progress')\r\n    //   .attr('x',`${this.planStart}`)\r\n    //   .attr('rx', 3)\r\n    //   .attr('ry', 3)\r\n    //   .attr('width', 0)\r\n    //   .attr('height', this.height)\r\n    //   .attr('stroke', 'none')\r\n    //   .attr('fill', '#2b3a6a')\r\n    //   .attr('transform', `translate(0,${this.height + 2})`)\r\n    //   .transition().duration(1000)\r\n    //   .attr('width', (d) => this.progress);\r\n\r\n    // render current\r\n    taskContainer.append(d => new CurrentBar(this.currentStart, this.currentWidth, this.height, this.taskDetail).render());\r\n\r\n    // render flow line\r\n    this.flowChart = new FlowChart(taskContainer, containElement, this.dependence, this.taskDetail, this.arrDepend);\r\n    this.flowChart.init();\r\n\r\n    // event hover\r\n    taskContainer\r\n      .on('mouseout', mouseoutHandle)\r\n      .on('mousemove', mouseMoveHandle);\r\n\r\n    // hidden toolTip\r\n    function mouseoutHandle() {\r\n      _toolTip.visible = false;\r\n      _toolTip.render();\r\n    }\r\n\r\n    // update toolTip\r\n    function mouseMoveHandle() {\r\n      let mouse = d3.mouse(this);\r\n      _toolTip.setPosition(mouse[0], _y + 50);\r\n      _toolTip.visible = true;\r\n      _toolTip.render();\r\n    }\r\n\r\n    return taskContainer.node();\r\n  }\r\n}\r\n","D:\\GRANT\\src\\components\\Contents\\GanttD3\\Modal.js",["130"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport modal from '../../../styles/Modal.module.scss';\r\nimport Datetime from 'react-datetime';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Modal = (props) => {\r\n  const [infoForm, setInfoForm] = useState({\r\n    id: uuidv4(),\r\n    isShow: true,\r\n    task: '',\r\n    type: '',\r\n    startTimeCurrent: '', //year/month/day\r\n    endTimeCurrent: '',\r\n    startTimePlan: '', //year/month/day\r\n    endTimePlan: '',\r\n    startTimeInitialPlan: '', //year/month/day\r\n    endTimeInitialPlan: '',\r\n    details: '',\r\n    progress: 50,\r\n    level: 1,\r\n    hasChild: false,\r\n    collapsed: false,\r\n    group: [],\r\n  });\r\n  let allGroup = new Set(props.data.map((item) => item.type));\r\n  let handleSubmit = useRef();\r\n\r\n  useEffect(() => {\r\n    if (props.modal.contextId) {\r\n      const index = props.data.findIndex((el) => el.id === props.modal.contextId);\r\n      if (props.modal.type === 'create') {\r\n        setInfoForm({\r\n          ...infoForm,\r\n          type: props.data[index].type,\r\n          level: props.data[index].level + 1,\r\n        });\r\n      }\r\n      if (props.modal.type === 'update') {\r\n        setInfoForm({\r\n          ...props.data[index],\r\n        });\r\n      }\r\n    }\r\n    if (props.modal.type === 'create') {\r\n      handleSubmit.current = props.handleCreateTask;\r\n    }\r\n    if (props.modal.type === 'update') {\r\n      handleSubmit.current = props.handleUpdateTask;\r\n    }\r\n  }, []);\r\n\r\n  const InputChange = (e) => {\r\n    if (e.target.name === 'progress') {\r\n      if (e.target.value > 100) {\r\n        e.target.value = 100;\r\n      }\r\n      if (e.target.value < 0) {\r\n        e.target.value = 0;\r\n      }\r\n    }\r\n    setInfoForm({\r\n      ...infoForm,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleChangeTime = (e, type) => {\r\n    setInfoForm({\r\n      ...infoForm,\r\n      [type]: e.format('YYYY-MM-DD'),\r\n    });\r\n  };\r\n\r\n  return ReactDOM.createPortal(\r\n    <React.Fragment>\r\n      <div className={modal.modal_overlay} />\r\n      <div className={modal.modal_wrapper} aria-modal aria-hidden tabIndex={-1} role=\"dialog\">\r\n        <div className={modal.modal}>\r\n          <div className={modal.modal_header}>\r\n            <button\r\n              type=\"button\"\r\n              className={modal.modal_close_button}\r\n              data-dismiss=\"modal\"\r\n              aria-label=\"Close\"\r\n              onClick={(e) => props.toggleModal(e)}>\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <form>\r\n            <h3 className={modal.form_ttl}>Add New Task</h3>\r\n            <p>Task</p>\r\n            <div>\r\n              <input className={modal.ip} type=\"text\" onChange={InputChange} name=\"task\" value={infoForm.task} />\r\n            </div>\r\n            <div className={modal.dateGroup}>\r\n              <div className={modal.flexItem}>\r\n                <p>Type</p>\r\n                <div>\r\n                  <input\r\n                    className={modal.ip}\r\n                    type=\"text\"\r\n                    onChange={!props.modal.contextId ? InputChange : undefined}\r\n                    name=\"type\"\r\n                    value={infoForm.type}\r\n                    readOnly={!!props.modal.contextId}\r\n                    list=\"type-options\"\r\n                  />\r\n                  <datalist id=\"type-options\">\r\n                    {Array.from(allGroup).map((el, key) => (\r\n                      <option key={key}>{el}</option>\r\n                    ))}\r\n                  </datalist>\r\n                </div>\r\n              </div>\r\n              <div className={modal.flexItem}>\r\n                <p>\r\n                  Progress\r\n                  <input\r\n                    className={modal.inputSlider}\r\n                    type=\"number\"\r\n                    onChange={InputChange}\r\n                    name=\"progress\"\r\n                    value={infoForm.progress}\r\n                  />\r\n                  %\r\n                </p>\r\n                <div>\r\n                  <input\r\n                    className={modal.slider}\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    onChange={InputChange}\r\n                    name=\"progress\"\r\n                    value={infoForm.progress}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={modal.dateGroup}>\r\n              <div className={modal.flexItem}>\r\n                <p>Start Time Current</p>\r\n                <div className={modal.dateItem}>\r\n                  <Datetime\r\n                    // ref={dateFromRef}\r\n                    locale=\"ja-JP\"\r\n                    value={infoForm.startTimeCurrent}\r\n                    dateFormat=\"YYYY-MM-DD\"\r\n                    timeFormat={false}\r\n                    onChange={(e) => handleChangeTime(e, 'startTimeCurrent')}\r\n                    closeOnSelect={true}\r\n                    className={modal.time}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className={modal.flexItem}>\r\n                <p>End Time Current</p>\r\n                <div className={modal.dateItem}>\r\n                  <Datetime\r\n                    // ref={dateFromRef}\r\n                    locale=\"ja-JP\"\r\n                    value={infoForm.endTimeCurrent}\r\n                    dateFormat=\"YYYY-MM-DD\"\r\n                    timeFormat={false}\r\n                    onChange={(e) => handleChangeTime(e, 'endTimeCurrent')}\r\n                    closeOnSelect={true}\r\n                    className={modal.time}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={modal.dateGroup}>\r\n              <div className={modal.flexItem}>\r\n                <p>Start Time Plan</p>\r\n                <div className={modal.dateItem}>\r\n                  {/* <input className={modal.ip} type='text' onChange={InputChange} name='endTime' value={infoForm.endTime} /> */}\r\n                  <Datetime\r\n                    // ref={dateFromRef}\r\n                    locale=\"ja-JP\"\r\n                    value={infoForm.startTimePlan}\r\n                    dateFormat=\"YYYY-MM-DD\"\r\n                    timeFormat={false}\r\n                    onChange={(e) => handleChangeTime(e, 'startTimePlan')}\r\n                    closeOnSelect={true}\r\n                    className={modal.time}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className={modal.flexItem}>\r\n                <p>End Time Plan</p>\r\n                <div className={modal.dateItem}>\r\n                  {/* <input className={modal.ip} type='text' onChange={InputChange} name='endTime' value={infoForm.endTime} /> */}\r\n                  <Datetime\r\n                    // ref={dateFromRef}\r\n                    locale=\"ja-JP\"\r\n                    value={infoForm.endTimePlan}\r\n                    dateFormat=\"YYYY-MM-DD\"\r\n                    timeFormat={false}\r\n                    onChange={(e) => handleChangeTime(e, 'endTimePlan')}\r\n                    closeOnSelect={true}\r\n                    className={modal.time}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* <p>Start Time Initial Plan</p>\r\n            <div>\r\n              //<input className={modal.ip} type='text' onChange={InputChange} name='endTime' value={infoForm.endTime} />\r\n              <Datetime\r\n                // ref={dateFromRef}\r\n                locale=\"ja-JP\"\r\n                value={infoForm.endTime}\r\n                dateFormat=\"YYYY-MM-DD\"\r\n                timeFormat={false}\r\n                onChange={(e) => getStartTimeInitialPlan(e)}\r\n                closeOnSelect={true}\r\n                className={modal.time}\r\n              />\r\n            </div>\r\n            <p>End Time Initial Plan</p>\r\n            <div>\r\n              //<input className={modal.ip} type='text' onChange={InputChange} name='endTime' value={infoForm.endTime} />\r\n              <Datetime\r\n                // ref={dateFromRef}\r\n                locale=\"ja-JP\"\r\n                value={infoForm.endTime}\r\n                dateFormat=\"YYYY-MM-DD\"\r\n                timeFormat={false}\r\n                onChange={(e) => getEndTimeInitialPlan(e)}\r\n                closeOnSelect={true}\r\n                className={modal.time}\r\n              />\r\n            </div> */}\r\n            <p>Details</p>\r\n            <div>\r\n              <textarea className={modal.textarea} onChange={InputChange} name=\"details\" value={infoForm.details} />\r\n            </div>\r\n            <div>\r\n              <span\r\n                className={modal.form_btn}\r\n                onClick={(e) => {\r\n                  handleSubmit.current(e, infoForm, props.modal.contextId);\r\n                }}>\r\n                Add\r\n              </span>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>,\r\n    document.body\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","D:\\GRANT\\src\\components\\Contents\\GanttD3\\useModal.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\GanttTable.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\dragChart.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\data.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\plansBar.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\initPlansBar.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\currentBar.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\toolTip.js",[],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\flowChart.js",[],["131","132"],"D:\\GRANT\\src\\components\\Contents\\GanttD3\\PeriodList.js",["133","134","135"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport period from '../../../styles/Period.module.scss';\r\nimport PeriodItem from './PeriodItem';\r\n\r\nconst PeriodList = (props) => {\r\n  return (\r\n    <ul className={period.list}>\r\n      {/* <PeriodItem name={'作業日中'}></PeriodItem> */}\r\n      <p className={period.text}>期間</p>\r\n      <PeriodItem name={'月間工程'} type={'month'} setPeriod={props.setPeriod}></PeriodItem>\r\n      <PeriodItem name={'週間工程'} type={'week'} setPeriod={props.setPeriod}></PeriodItem>\r\n      <PeriodItem name={'作業日中'} type={'day'} setPeriod={props.setPeriod}></PeriodItem>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PeriodList;\r\n","D:\\GRANT\\src\\components\\Contents\\GanttD3\\PeriodItem.js",["136","137","138"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport period from '../../../styles/Period.module.scss';\r\n\r\nconst PeriodItem = (props) => {\r\n  return <li className={period.item} onClick={() => props.setPeriod(props.type)}>{props.name}</li>;\r\n};\r\n\r\nexport default PeriodItem;\r\n",{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":4,"column":10,"nodeType":"145","messageId":"146","endLine":4,"endColumn":17},{"ruleId":"143","severity":1,"message":"147","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":13},{"ruleId":"148","severity":1,"message":"149","line":25,"column":26,"nodeType":"145","endLine":25,"endColumn":37},{"ruleId":"148","severity":1,"message":"150","line":39,"column":6,"nodeType":"151","endLine":39,"endColumn":19,"suggestions":"152"},{"ruleId":"148","severity":1,"message":"153","line":53,"column":6,"nodeType":"151","endLine":53,"endColumn":8,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":191,"column":48,"nodeType":"157","messageId":"158","endLine":191,"endColumn":50},{"ruleId":"143","severity":1,"message":"159","line":82,"column":11,"nodeType":"145","messageId":"146","endLine":82,"endColumn":22},{"ruleId":"143","severity":1,"message":"160","line":107,"column":9,"nodeType":"145","messageId":"146","endLine":107,"endColumn":18},{"ruleId":"143","severity":1,"message":"161","line":110,"column":11,"nodeType":"145","messageId":"146","endLine":110,"endColumn":19},{"ruleId":"143","severity":1,"message":"162","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":17},{"ruleId":"143","severity":1,"message":"163","line":4,"column":8,"nodeType":"145","messageId":"146","endLine":4,"endColumn":14},{"ruleId":"143","severity":1,"message":"164","line":32,"column":11,"nodeType":"145","messageId":"146","endLine":32,"endColumn":12},{"ruleId":"143","severity":1,"message":"165","line":41,"column":9,"nodeType":"145","messageId":"146","endLine":41,"endColumn":14},{"ruleId":"143","severity":1,"message":"166","line":45,"column":11,"nodeType":"145","messageId":"146","endLine":45,"endColumn":19},{"ruleId":"143","severity":1,"message":"167","line":63,"column":9,"nodeType":"145","messageId":"146","endLine":63,"endColumn":16},{"ruleId":"148","severity":1,"message":"168","line":37,"column":6,"nodeType":"151","endLine":37,"endColumn":8,"suggestions":"169"},{"ruleId":"139","replacedBy":"170"},{"ruleId":"141","replacedBy":"171"},{"ruleId":"143","severity":1,"message":"172","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":26},{"ruleId":"143","severity":1,"message":"173","line":1,"column":28,"nodeType":"145","messageId":"146","endLine":1,"endColumn":34},{"ruleId":"143","severity":1,"message":"174","line":1,"column":36,"nodeType":"145","messageId":"146","endLine":1,"endColumn":44},{"ruleId":"143","severity":1,"message":"172","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":26},{"ruleId":"143","severity":1,"message":"173","line":1,"column":28,"nodeType":"145","messageId":"146","endLine":1,"endColumn":34},{"ruleId":"143","severity":1,"message":"174","line":1,"column":36,"nodeType":"145","messageId":"146","endLine":1,"endColumn":44},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'Gantt' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has missing dependencies: 'from' and 'to'. Either include them or remove the dependency array.","ArrayExpression",["177"],"React Hook useEffect has a missing dependency: 'resizeListener'. Either include it or remove the dependency array.",["178"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'currentDate' is assigned a value but never used.","'tasksList' is assigned a value but never used.","'timeText' is assigned a value but never used.","'DragChart' is defined but never used.","'moment' is defined but never used.","'x' is assigned a value but never used.","'plans' is assigned a value but never used.","'initPlan' is assigned a value but never used.","'current' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'infoForm', 'props.data', and 'props.modal.contextId'. Either include them or remove the dependency array. If 'setInfoForm' needs the current value of 'props.data', you can also switch to useReducer instead of useState and read 'props.data' in the reducer.",["179"],["175"],["176"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: [width, data, from, to]",{"range":"186","text":"187"},"Update the dependencies array to be: [resizeListener]",{"range":"188","text":"189"},"Update the dependencies array to be: [infoForm, props.data, props.modal.contextId]",{"range":"190","text":"191"},[1387,1400],"[width, data, from, to]",[1719,1721],"[resizeListener]",[1050,1052],"[infoForm, props.data, props.modal.contextId]"]